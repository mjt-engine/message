{"version":3,"file":"connectListenerToSubscription.js","sourceRoot":"","sources":["../src/connectListenerToSubscription.ts"],"names":[],"mappings":"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","sourcesContent":["import { isDefined, isUndefined } from \"@mjt-engine/object\";\nimport { type NatsConnection, headers as natsHeaders } from \"nats.ws\";\nimport type {\n  ConnectionListener,\n  ConnectionMap,\n} from \"./ConnectionMessageTypes\";\nimport { errorToErrorDetail } from \"./error/errorToErrorDetail\";\nimport { natsHeadersToRecord } from \"./natsHeadersToRecord\";\nimport { Bytes } from \"@mjt-engine/byte\";\n\nexport const connectListenerToSubscription = async <\n  CM extends ConnectionMap,\n  S extends keyof CM,\n  E extends Record<string, string>\n>({\n  connection,\n  subject,\n  listener,\n  options = {},\n  env = {},\n}: {\n  subject: string;\n  connection: NatsConnection;\n  listener: ConnectionListener<CM, S, E>;\n  options?: Partial<{ log: (message: unknown, ...extrap: unknown[]) => void }>;\n  env?: Partial<E>;\n}) => {\n  const { log = () => {} } = options;\n  log(\"connectListenerToSubscription: subject: \", subject);\n  const subscription = connection.subscribe(subject);\n\n  for await (const message of subscription) {\n    try {\n      const detail = Bytes.msgPackToObject<CM[S][\"request\"]>(message.data);\n      const requestHeaders = natsHeadersToRecord(\n        message.headers\n      ) as CM[S][\"headers\"];\n      const abortController = new AbortController();\n      if (isDefined(requestHeaders?.[\"abort-subject\"])) {\n        const abortSubject = requestHeaders[\"abort-subject\"];\n        const abortSubscription = connection.subscribe(abortSubject, {\n          max: 1,\n          callback: () => {\n            abortController.abort();\n            abortSubscription.unsubscribe();\n            message.respond(); // Acknowledge the abort\n          },\n        });\n      }\n      const send = (\n        response?: CM[S][\"response\"],\n        options: Partial<{\n          code: number;\n          codeDescription: string;\n          headers: Record<string, string>;\n        }> = {}\n      ) => {\n        const responseHeaders = natsHeaders(\n          options.code,\n          options.codeDescription\n        );\n        if (isDefined(options.headers)) {\n          for (const [key, value] of Object.entries(options.headers)) {\n            responseHeaders.set(key, value);\n          }\n        }\n        if (isUndefined(response)) {\n          connection.publish(message.reply!);\n          return;\n        }\n        const responseMsg = Bytes.toMsgPack(response);\n        message.respond(responseMsg, {\n          headers: responseHeaders,\n        });\n      };\n      const sendError = async (\n        error: unknown,\n\n        options: Partial<{\n          code: number;\n\n          codeDescription: string;\n          headers: Record<string, string>;\n        }> = {}\n      ) => {\n        const errorDetail = await errorToErrorDetail({\n          error,\n          extra: [message.subject],\n        });\n        const responseHeaders = natsHeaders(\n          options.code ?? 500,\n          options.codeDescription ?? \"Error\"\n        );\n        if (isDefined(options.headers)) {\n          for (const [key, value] of Object.entries(options.headers)) {\n            responseHeaders.set(key, value);\n          }\n        }\n        message.respond(Bytes.toMsgPack(errorDetail), {\n          headers: responseHeaders,\n        });\n      };\n      const result = await listener({\n        detail,\n        headers: requestHeaders,\n        env,\n        signal: abortController.signal,\n        send,\n        sendError,\n      });\n      const reply = message.reply;\n      if (isUndefined(reply)) {\n        continue;\n      }\n      send(result);\n    } catch (error) {\n      const errorDetail = await errorToErrorDetail({\n        error,\n        extra: [message.subject],\n      });\n      log(errorDetail);\n      const hs = natsHeaders(500, \"Listener Error\");\n      message.respond(Bytes.toMsgPack(errorDetail), {\n        headers: hs,\n      });\n    }\n  }\n};\n"]}