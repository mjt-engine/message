{"version":3,"file":"msgToResponseData.js","sourceRoot":"","sources":["../src/msgToResponseData.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,KAAK,EAAE,MAAM,kBAAkB,CAAC;AAGzC,OAAO,EAAE,SAAS,EAAE,MAAM,oBAAoB,CAAC;AAC/C,OAAO,EAAE,MAAM,EAAE,MAAM,mBAAmB,CAAC;AAE3C,MAAM,CAAC,MAAM,iBAAiB,GAAG,KAAK,EAAE,EACtC,GAAG,EACH,OAAO,EACP,OAAO,EACP,GAAG,GAMJ,EAAE,EAAE;IACH,MAAM,YAAY,GAAG,KAAK,CAAC,eAAe,CACxC,IAAI,UAAU,CAAC,GAAG,CAAC,IAAI,CAAC,CACzB,CAAC;IACF,IAAI,GAAG,CAAC,OAAO,EAAE,QAAQ,EAAE,CAAC;QAC1B,GAAG,CAAC,gDAAgD,EAAE;YACpD,OAAO,EAAE,GAAG,CAAC,OAAO;YACpB,YAAY;SACb,CAAC,CAAC;QACH,MAAM,IAAI,KAAK,CAAC,6BAA6B,OAAiB,EAAE,EAAE;YAChE,KAAK,EAAE,MAAM,CAAC,kBAAkB,CAAC;gBAC/B,KAAK,EAAE,YAAY;gBACnB,KAAK,EAAE,CAAC,OAAO,CAAC;aACjB,CAAC;SACH,CAAC,CAAC;IACL,CAAC;IACD,IAAI,SAAS,CAAC,YAAY,CAAC,KAAK,CAAC,EAAE,CAAC;QAClC,GAAG,CAAC,8CAA8C,EAAE,YAAY,CAAC,KAAK,CAAC,CAAC;QACxE,MAAM,IAAI,KAAK,CAAC,qBAAqB,OAAiB,EAAE,EAAE;YACxD,KAAK,EAAE,MAAM,CAAC,kBAAkB,CAAC;gBAC/B,KAAK,EAAE,YAAY,CAAC,KAAK;gBACzB,KAAK,EAAE,CAAC,OAAO,CAAC;aACjB,CAAC;SACH,CAAC,CAAC;IACL,CAAC;IACD,OAAO,YAAY,CAAC,KAAK,CAAC;AAC5B,CAAC,CAAC","sourcesContent":["import { Bytes } from \"@mjt-engine/byte\";\nimport type { Msg } from \"nats.ws\";\nimport type { ValueOrError } from \"./type/ValueOrError\";\nimport { isDefined } from \"@mjt-engine/object\";\nimport { Errors } from \"@mjt-engine/error\";\n\nexport const msgToResponseData = async ({\n  msg,\n  subject,\n  request,\n  log,\n}: {\n  msg: Msg;\n  subject: unknown;\n  request: unknown;\n  log: (message: unknown, ...extra: unknown[]) => void;\n}) => {\n  const responseData = Bytes.msgPackToObject<ValueOrError>(\n    new Uint8Array(msg.data)\n  );\n  if (msg.headers?.hasError) {\n    log(\"Error: msgToResponseData: msg.headers.hasError\", {\n      headers: msg.headers,\n      responseData,\n    });\n    throw new Error(`Message Error on subject: ${subject as string}`, {\n      cause: Errors.errorToErrorDetail({\n        error: responseData,\n        extra: [request],\n      }),\n    });\n  }\n  if (isDefined(responseData.error)) {\n    log(\"Error: msgToResponseData: responseData.error\", responseData.error);\n    throw new Error(`Error on subject: ${subject as string}`, {\n      cause: Errors.errorToErrorDetail({\n        error: responseData.error,\n        extra: [request],\n      }),\n    });\n  }\n  return responseData.value;\n};\n"]}