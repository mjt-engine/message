{"version":3,"file":"errorToText.js","sourceRoot":"","sources":["../../src/error/errorToText.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,IAAI,EAAE,MAAM,oBAAoB,CAAC;AAGrD,MAAM,iBAAiB,GAAG,CAAC,WAAwB,EAAU,EAAE;IAC7D,MAAM,EAAE,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,GAAG,WAAW,CAAC;IACrD,MAAM,SAAS,GAAG,KAAK,CAAC,CAAC,CAAC,gBAAgB,iBAAiB,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC;IAC1E,MAAM,SAAS,GAAG,KAAK;QACrB,CAAC,CAAC,YAAY,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,SAAS,EAAE,CAAC,CAAC,EAAE;QACnD,CAAC,CAAC,EAAE,CAAC;IACP,OAAO,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,SAAS,GAAG,SAAS,CAAC;AAC/E,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,WAAW,GAAG,CAAC,KAAc,EAAU,EAAE;IACpD,IAAI,OAAO,KAAK,IAAI,QAAQ,EAAE,CAAC;QAC7B,OAAO,KAAK,CAAC;IACf,CAAC;IACD,IAAI,KAAK,YAAY,QAAQ,EAAE,CAAC;QAC9B,OAAO,GAAG,KAAK,CAAC,GAAG,IAAI,KAAK,CAAC,MAAM,IAAI,KAAK,CAAC,UAAU,EAAE,CAAC;IAC5D,CAAC;IACD,IAAI,OAAO,KAAK,KAAK,QAAQ,IAAI,KAAK,KAAK,IAAI,IAAI,SAAS,IAAI,KAAK,EAAE,CAAC;QACtE,OAAO,iBAAiB,CAAC,KAAoB,CAAC,CAAC;IACjD,CAAC;IACD,OAAO,IAAI,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,SAAS,EAAE,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;AAC/D,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,gBAAgB,GAAG,KAAK,EAAE,KAAc,EAAmB,EAAE;IACxE,IAAI,OAAO,KAAK,IAAI,QAAQ,EAAE,CAAC;QAC7B,OAAO,KAAK,CAAC;IACf,CAAC;IACD,IAAI,KAAK,YAAY,QAAQ,EAAE,CAAC;QAC9B,MAAM,IAAI,GAAG,MAAM,KAAK,CAAC,IAAI,EAAE,CAAC;QAChC,OAAO,GAAG,KAAK,CAAC,GAAG,IAAI,KAAK,CAAC,MAAM,IAAI,KAAK,CAAC,UAAU,IAAI,IAAI,EAAE,CAAC;IACpE,CAAC;IACD,IAAI,OAAO,KAAK,KAAK,QAAQ,IAAI,KAAK,KAAK,IAAI,IAAI,SAAS,IAAI,KAAK,EAAE,CAAC;QACtE,OAAO,iBAAiB,CAAC,KAAoB,CAAC,CAAC;IACjD,CAAC;IACD,OAAO,IAAI,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,SAAS,EAAE,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;AAC/D,CAAC,CAAC","sourcesContent":["import { isDefined, safe } from \"@mjt-engine/object\";\nimport type { ErrorDetail } from \"./ErrorDetail\";\n\nconst formatErrorDetail = (errorDetail: ErrorDetail): string => {\n  const { message, stack, extra, cause } = errorDetail;\n  const causeText = cause ? `\\nCaused by: ${formatErrorDetail(cause)}` : \"\";\n  const extraText = extra\n    ? `\\nExtra: ${JSON.stringify(extra, undefined, 2)}`\n    : \"\";\n  return [message, stack].filter(isDefined).join(\"\\n\") + extraText + causeText;\n};\n\nexport const errorToText = (error: unknown): string => {\n  if (typeof error == \"string\") {\n    return error;\n  }\n  if (error instanceof Response) {\n    return `${error.url} ${error.status} ${error.statusText}`;\n  }\n  if (typeof error === \"object\" && error !== null && \"message\" in error) {\n    return formatErrorDetail(error as ErrorDetail);\n  }\n  return safe(() => JSON.stringify(error, undefined, 2)) ?? \"\";\n};\n\nexport const errorToTextAsync = async (error: unknown): Promise<string> => {\n  if (typeof error == \"string\") {\n    return error;\n  }\n  if (error instanceof Response) {\n    const text = await error.text();\n    return `${error.url} ${error.status} ${error.statusText} ${text}`;\n  }\n  if (typeof error === \"object\" && error !== null && \"message\" in error) {\n    return formatErrorDetail(error as ErrorDetail);\n  }\n  return safe(() => JSON.stringify(error, undefined, 2)) ?? \"\";\n};\n"]}