{"version":3,"file":"ConnectionMessageTypes.js","sourceRoot":"","sources":["../src/ConnectionMessageTypes.ts"],"names":[],"mappings":"","sourcesContent":["export type ConnectionMap<\n  Req = unknown,\n  Resp = unknown,\n  Header extends string = string\n> = Record<\n  string,\n  { request: Req; response: Resp; headers?: Record<Header, string> }\n>;\n\nexport type ConnectionSpecialHeader = \"abort-subject\";\n\nexport type ConnectionListener<\n  CM extends ConnectionMap,\n  S extends keyof CM,\n  E extends Record<string, string> = Record<string, string>\n> = (props: {\n  env: Readonly<Partial<E>>;\n  detail: CM[S][\"request\"];\n  headers?: CM[S][\"headers\"];\n  signal: AbortSignal;\n  send: (\n    response?: CM[S][\"response\"],\n    options?: Partial<{\n      code: number;\n      codeDescription: string;\n      headers: Record<string, string>;\n    }>\n  ) => void;\n  sendError: (\n    error: unknown,\n    options?: Partial<{\n      code: number;\n      codeDescription: string;\n      headers: Record<string, string>;\n    }>\n  ) => void;\n}) =>\n  | CM[S][\"response\"]\n  | Promise<CM[S][\"response\"] | void>\n  | void\n  | Promise<void>;\n\nexport type ConnectionRequester<Req = unknown, Resp = unknown> = (props: {\n  subject: string;\n  request: Req;\n  options?: Partial<{ headers: Record<string, string> }>;\n}) => Promise<Resp>;\n"]}