{"version":3,"file":"connectConnectionListenerToSubjectRoot.js","sourceRoot":"","sources":["../src/connectConnectionListenerToSubjectRoot.ts"],"names":[],"mappings":"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","sourcesContent":["import { Bytes } from \"@mjt-engine/byte\";\nimport { isDefined, isUndefined } from \"@mjt-engine/object\";\nimport { type NatsConnection, headers as natsHeaders } from \"nats.ws\";\nimport type { ConnectionMap } from \"./type/ConnectionMap\";\nimport type { ConnectionListener } from \"./type/ConnectionListener\";\nimport { errorToErrorDetail } from \"./error/errorToErrorDetail\";\nimport { natsHeadersToRecord } from \"./natsHeadersToRecord\";\nimport { sendMessageError } from \"./sendMessageError\";\nimport type { ValueOrError } from \"./type/ValueOrError\";\n\nexport const connectConnectionListenerToSubjectRoot = async <\n  S extends keyof CM,\n  CM extends ConnectionMap,\n  E extends Record<string, string>\n>({\n  connection,\n  subject,\n  listener,\n  options = {},\n  env = {},\n  signal,\n}: {\n  subject: string;\n  connection: NatsConnection;\n  listener: ConnectionListener<CM, S, E>;\n  options?: Partial<{\n    queue?: string;\n    maxMessages?: number;\n    timeout?: number;\n    log: (message: unknown, ...extra: unknown[]) => void;\n  }>;\n  env?: Partial<E>;\n  signal?: AbortSignal;\n}) => {\n  const { log = () => {}, queue, maxMessages, timeout } = options;\n  log(\"connectConnectionListenerToSubject: subject: \", subject);\n  const subscription = connection.subscribe(subject, {\n    queue,\n    max: maxMessages,\n    timeout,\n  });\n\n  if (isDefined(signal)) {\n    if (signal.aborted) {\n      subscription.unsubscribe();\n      throw new Error(\"Signal already in aborted state\");\n    }\n    signal.addEventListener(\"abort\", () => {\n      subscription.unsubscribe();\n    });\n  }\n\n  for await (const message of subscription) {\n    try {\n      const valueOrError = Bytes.msgPackToObject<\n        ValueOrError<CM[S][\"request\"]>\n      >(message.data);\n      const requestHeaders = natsHeadersToRecord(\n        message.headers\n      ) as CM[S][\"headers\"];\n      const abortController = new AbortController();\n      if (isDefined(requestHeaders?.[\"abort-subject\"])) {\n        const abortSubject = requestHeaders[\"abort-subject\"];\n        const abortSubscription = connection.subscribe(abortSubject, {\n          max: 1,\n          callback: () => {\n            abortController.abort();\n            abortSubscription.unsubscribe();\n            message.respond(); // Acknowledge the abort\n          },\n        });\n      }\n      const send = (\n        response?: CM[S][\"response\"],\n        options: Partial<{\n          code: number;\n          codeDescription: string;\n          headers: Record<string, string>;\n        }> = {}\n      ) => {\n        const responseHeaders = natsHeaders(\n          options.code,\n          options.codeDescription\n        );\n        if (isDefined(options.headers)) {\n          for (const [key, value] of Object.entries(options.headers)) {\n            responseHeaders.set(key, value);\n          }\n        }\n        if (isUndefined(response)) {\n          connection.publish(message.reply!);\n          return;\n        }\n        const responseMsg = Bytes.toMsgPack({\n          value: response,\n        } as ValueOrError);\n        message.respond(responseMsg, {\n          headers: responseHeaders,\n        });\n      };\n\n      const sendError = async (\n        error: unknown,\n        options: Partial<{\n          code: number;\n          codeDescription: string;\n          headers: Record<string, string>;\n        }> = {}\n      ) => sendMessageError(message)(error, options);\n\n      const unsubscribe = (maxMessages?: number) =>\n        subscription.unsubscribe(maxMessages);\n\n      if (isDefined(valueOrError.error)) {\n        log(\n          \"Error: connectListenerToSubscription: valueOrError.error\",\n          valueOrError.error\n        );\n        continue;\n      }\n\n      const result = await listener({\n        detail: valueOrError.value,\n        headers: requestHeaders,\n        env,\n        signal: abortController.signal,\n        send,\n        sendError,\n        unsubscribe,\n      });\n      const reply = message.reply;\n      if (isUndefined(reply)) {\n        continue;\n      }\n      send(result);\n    } catch (error) {\n      const errorDetail = await errorToErrorDetail({\n        error,\n        extra: [message.subject],\n      });\n      log(errorDetail);\n      sendMessageError(message)(error);\n    }\n  }\n};\n"]}