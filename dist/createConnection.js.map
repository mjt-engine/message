{"version":3,"file":"createConnection.js","sourceRoot":"","sources":["../src/createConnection.ts"],"names":[],"mappings":"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","sourcesContent":["import { Bytes } from \"@mjt-engine/byte\";\nimport { isDefined, isUndefined, toMany } from \"@mjt-engine/object\";\nimport {\n  connect,\n  createInbox,\n  credsAuthenticator,\n  Msg,\n  RequestStrategy,\n  type NatsConnection,\n  type Stats,\n  type Status,\n} from \"nats.ws\";\nimport {\n  connectConnectionListenerToSubject,\n  DEFAULT_MAX_MESSAGE_SIZE,\n} from \"./connectConnectionListenerToSubject\";\nimport { msgToResponseData } from \"./msgToResponseData\";\nimport { recordToNatsHeaders } from \"./recordToNatsHeaders\";\nimport {\n  ABORT_SUBJECT_HEADER,\n  CHUNK_HEADER,\n  REPLY_HEADER,\n} from \"./SPECIAL_HEADERS\";\nimport type { ConnectionListener } from \"./type/ConnectionListener\";\nimport type { ConnectionMap } from \"./type/ConnectionMap\";\nimport type { EventMap } from \"./type/EventMap\";\nimport type { PartialSubject } from \"./type/PartialSubject\";\nimport type { ValueOrError } from \"./type/ValueOrError\";\nimport { Errors } from \"@mjt-engine/error\";\nimport { msgsBufferToCombinedUint8Array } from \"./msgsBufferToCombinedUint8Array\";\nimport { NatsConnectionImpl } from \"nats.ws/lib/nats-base-client/nats\";\n\nexport type MessageConnection = NatsConnection;\nexport type MessageConnectionStats = Stats;\nexport type MessageConnectionStatus = Status;\n\nexport type MessageConnectionInstance<CM extends ConnectionMap> = {\n  connection: MessageConnection;\n  requestMany: <S extends keyof CM>(props: {\n    subject: S;\n    request: CM[S][\"request\"];\n    headers?: Record<keyof CM[S][\"headers\"], string>;\n    options?: Partial<{ timeoutMs: number }>;\n    onResponse: (response: CM[S][\"response\"]) => void | Promise<void>;\n    signal?: AbortSignal;\n  }) => Promise<void>;\n  request: <S extends keyof CM>(props: {\n    subject: S;\n    request: CM[S][\"request\"];\n    headers?: Record<keyof CM[S][\"headers\"], string>;\n    options?: Partial<{ timeoutMs: number }>;\n  }) => Promise<CM[S][\"response\"]>;\n  publish: <S extends PartialSubject, EM extends EventMap<S>>(props: {\n    subject: S;\n    payload?: EM[S];\n    request?: CM[S][\"request\"];\n    headers?: Record<keyof CM[S][\"headers\"], string>;\n    options?: Partial<{ timeoutMs: number }>;\n    onResponse?: (response: CM[S][\"response\"]) => void | Promise<void>;\n    onError?: (error: unknown) => void;\n    signal?: AbortSignal;\n  }) => Promise<CM[S][\"response\"]>;\n};\n\nexport const createConnection = async <\n  CM extends ConnectionMap,\n  E extends Record<string, string> = Record<string, string>\n>({\n  server,\n  creds,\n  token,\n  subscribers = {},\n  options = {},\n  env = {},\n}: {\n  server: string[] | string;\n  subscribers?: Partial<{ [k in keyof CM]: ConnectionListener<CM, k, E> }>;\n  creds?: string;\n  token?: string;\n  options?: Partial<{\n    log: (message: unknown, ...extra: unknown[]) => void;\n    maxMessageSize?: number;\n  }>;\n  env?: Partial<E>;\n}): Promise<MessageConnectionInstance<CM>> => {\n  const { log = () => {}, maxMessageSize = DEFAULT_MAX_MESSAGE_SIZE } = options;\n  log(\"createConnection: server: \", server);\n  const connection: MessageConnection = await connect({\n    servers: [...toMany(server)],\n    authenticator: isDefined(creds)\n      ? credsAuthenticator(new TextEncoder().encode(creds))\n      : undefined,\n    token: token,\n  });\n  const entries = Object.entries(subscribers);\n  log(\"createConnection: entries: \", entries);\n  for (const [subject, listener] of entries) {\n    if (isUndefined(listener)) {\n      continue;\n    }\n    connectConnectionListenerToSubject({\n      connection,\n      subject,\n      listener,\n      options,\n      env,\n    });\n  }\n\n  return {\n    connection,\n    requestMany: async <S extends keyof CM>(props: {\n      subject: S;\n      request: CM[S][\"request\"];\n      headers?: Record<keyof CM[S][\"headers\"], string>;\n      options?: Partial<{ timeoutMs: number; maxMessageSize: number }>;\n      onResponse: (response: CM[S][\"response\"]) => void | Promise<void>;\n      signal?: AbortSignal;\n    }) => {\n      const {\n        request,\n        subject,\n        headers,\n        options = {},\n        onResponse,\n        signal,\n      } = props;\n      const {\n        timeoutMs = 60 * 1000,\n        maxMessageSize = DEFAULT_MAX_MESSAGE_SIZE,\n      } = options;\n      const requestMsg = Bytes.toMsgPack({ value: request } as ValueOrError);\n\n      if (requestMsg.byteLength > maxMessageSize) {\n      }\n\n      const hs = recordToNatsHeaders(headers);\n      if (isDefined(signal)) {\n        const abortSubject = `abort.${Date.now()}.${crypto.randomUUID()}`;\n        hs?.set(ABORT_SUBJECT_HEADER, abortSubject);\n        signal.addEventListener(\"abort\", () => {\n          connection.publish(abortSubject);\n        });\n      }\n\n      const iterable = await connection.requestMany(\n        subject as string,\n        requestMsg,\n        {\n          maxWait: timeoutMs,\n          headers: hs,\n          strategy: RequestStrategy.SentinelMsg,\n        }\n      );\n      let buffer: (Uint8Array | undefined)[] = [];\n      for await (const resp of iterable) {\n        iterable;\n        if (signal?.aborted) {\n          return;\n        }\n        if (isUndefined(resp.data) || resp.data.byteLength === 0) {\n          break;\n        }\n        const chunkHeader = resp.headers?.get(CHUNK_HEADER);\n        if (chunkHeader) {\n          const chunkParts = chunkHeader.split(\"/\");\n          if (chunkParts.length !== 2) {\n            throw Errors.errorToErrorDetail({\n              error: new Error(\"Invalid chunk header format\"),\n              extra: [{ subject, request, headers, options }],\n            });\n          }\n          if (resp.headers?.hasError) {\n            throw Errors.errorToErrorDetail({\n              error: new Error(\"Chunked response has error\"),\n              extra: [{ subject, request, headers, options, resp }],\n            });\n          }\n          const [currentChunk, totalChunks] = chunkParts.map(Number);\n          if (buffer.length === 0) {\n            buffer = new Array(totalChunks).fill(undefined);\n          }\n          buffer[currentChunk - 1] = new Uint8Array(resp.data);\n          continue;\n        }\n        const responseData = await msgToResponseData({\n          msg: resp,\n          subject,\n          request,\n          log,\n        });\n        await onResponse(responseData);\n      }\n      if (buffer.length > 0) {\n        //recombine the chunks\n        const combined = msgsBufferToCombinedUint8Array(buffer);\n        buffer.length = 0; // Clear the buffer after recombining\n        const responseData = await msgToResponseData({\n          msg: { data: combined },\n          subject,\n          request,\n          log,\n        });\n        await onResponse(responseData);\n      }\n    },\n\n    request: async <S extends keyof CM>(props: {\n      subject: S;\n      request: CM[S][\"request\"];\n      headers?: Record<keyof CM[S][\"headers\"], string>;\n      options?: Partial<{ timeoutMs: number }>;\n    }): Promise<CM[S][\"response\"]> => {\n      const { request, subject, headers, options = {} } = props;\n      const requestMsg = Bytes.toMsgPack({ value: request } as ValueOrError);\n      const { timeoutMs = 60 * 1000 } = options;\n\n      const hs = recordToNatsHeaders(headers);\n\n      const resp = await connection.request(subject as string, requestMsg, {\n        timeout: timeoutMs,\n        headers: hs,\n      });\n      if (isUndefined(resp.data) || resp.data.byteLength === 0) {\n        return undefined;\n      }\n      if (resp.headers?.get(CHUNK_HEADER)) {\n        throw Errors.errorToErrorDetail({\n          error: new Error(\n            \"Chunked response recieved. Use requestMany instead.\"\n          ),\n          extra: [{ subject, request, headers, options }],\n        });\n      }\n      return msgToResponseData({ msg: resp, subject, request, log });\n    },\n\n    publish: async <S extends PartialSubject, EM extends EventMap<S>>(props: {\n      subject: S;\n      payload?: EM[S];\n      request?: CM[S][\"request\"];\n      headers?: Record<keyof CM[S][\"headers\"], string>;\n      options?: Partial<{ timeoutMs: number }>;\n      onResponse?: (response: CM[S][\"response\"]) => void | Promise<void>;\n      onError?: (error: unknown) => void;\n      signal?: AbortSignal;\n    }): Promise<CM[S][\"response\"]> => {\n      const {\n        payload,\n        request,\n        subject,\n        headers,\n        onResponse,\n        options = {},\n        signal,\n        onError,\n      } = props;\n      const { timeoutMs = 60 * 1000 } = options;\n      const value = isDefined(payload) ? payload : request;\n      const msg = Bytes.toMsgPack({ value } as ValueOrError);\n      const replySubject = createInbox();\n      const hs = recordToNatsHeaders(headers);\n      const subscription = connection.subscribe(replySubject);\n      await connection.flush();\n      const result = new Promise<CM[S][\"response\"]>(async (resolve, reject) => {\n        let buffer: (Uint8Array | undefined)[] = [];\n        const timeoutId = setTimeout(() => {\n          subscription.unsubscribe();\n          reject(new Error(\"Request timed out\"));\n        }, timeoutMs);\n        for await (const msg of subscription) {\n          if (signal?.aborted) {\n            clearTimeout(timeoutId);\n            subscription.unsubscribe();\n            return reject(new Error(\"Signal aborted\"));\n          }\n\n          if (isUndefined(msg.data) || msg.data.byteLength === 0) {\n            if (buffer.length != 0) {\n              const combined = msgsBufferToCombinedUint8Array(buffer);\n              buffer.length = 0; // Clear the buffer after recombining\n              try {\n                const responseData = await msgToResponseData({\n                  msg: { data: combined },\n                  subject,\n                  request: payload,\n                  log,\n                });\n                clearTimeout(timeoutId);\n                subscription.unsubscribe();\n                await onResponse?.(responseData);\n                resolve(responseData);\n                return;\n              } catch (e) {\n                onError?.(e);\n                reject(e);\n              }\n            }\n          }\n          if (msg.headers?.get(CHUNK_HEADER)) {\n            const chunkHeader = msg.headers.get(CHUNK_HEADER);\n            const chunkParts = chunkHeader.split(\"/\");\n            if (chunkParts.length !== 2) {\n              onError?.(\n                new Error(\"Invalid chunk header format: \" + chunkHeader)\n              );\n              return;\n            }\n            const [currentChunk, totalChunks] = chunkParts.map(Number);\n            if (buffer.length === 0) {\n              buffer = new Array(totalChunks).fill(undefined);\n            }\n            buffer[currentChunk - 1] = new Uint8Array(msg.data);\n            return;\n          }\n          if (isUndefined(msg.data) || msg.data.byteLength === 0) {\n            console.log(\n              \"connectConnectionListenerToSubject: No data in message \",\n              msg\n            );\n            resolve(undefined);\n            return;\n          }\n          clearTimeout(timeoutId);\n          subscription.unsubscribe();\n          const responseData = await msgToResponseData({\n            msg,\n            subject,\n            request: payload,\n            log,\n          });\n          await onResponse?.(responseData);\n\n          resolve(responseData);\n        }\n        if (signal) {\n          if (signal.aborted) {\n            clearTimeout(timeoutId);\n            subscription.unsubscribe();\n            return reject(new Error(\"Signal already in aborted state\"));\n          }\n          signal.addEventListener(\"abort\", () => {\n            clearTimeout(timeoutId);\n            subscription.unsubscribe();\n            reject(new Error(\"Signal aborted\"));\n          });\n        }\n      });\n      if (msg.byteLength < maxMessageSize) {\n        return connection.publish(subject as string, msg, {\n          headers: hs,\n          reply: replySubject,\n        });\n      }\n      const chunkCount = Math.ceil(msg.byteLength / maxMessageSize);\n      const chunks: Uint8Array[] = [];\n      for (let i = 0; i < chunkCount; i++) {\n        const start = i * maxMessageSize;\n        const end = start + maxMessageSize;\n        const chunk = new Uint8Array(msg.slice(start, end));\n        chunks.push(chunk);\n      }\n      // Publish each chunk separately\n      for (let i = 0; i < chunks.length; i++) {\n        const chunk = chunks[i];\n        const chunkHeader = `${i + 1}/${chunkCount}`;\n        const chunkHeaders = {\n          ...headers,\n          [CHUNK_HEADER]: chunkHeader,\n        };\n        connection.request(subject as string, chunk, {\n          headers: recordToNatsHeaders(chunkHeaders),\n          reply: replySubject,\n          timeout: timeoutMs,\n          noMux: true, // Ensure no multiplexing for chunked messages\n        });\n      }\n      return result;\n    },\n  };\n};\n"]}